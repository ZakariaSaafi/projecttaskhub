version: '3.8'

services:
  # =============== DATABASES ===============
  postgresql:
    image: postgres:15-alpine
    container_name: postgresql
    environment:
      POSTGRES_DB: projectdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_MULTIPLE_DATABASES: projectdb,keycloak
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - projecttaskhub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  mongodb:
    image: mongo:7-jammy
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: taskdb
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./scripts/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js
    networks:
      - projecttaskhub-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # =============== MESSAGE BROKER ===============
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./config/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./config/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - projecttaskhub-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # =============== IDENTITY PROVIDER ===============
  keycloak:
    image: quay.io/keycloak/keycloak:23.0
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin123
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgresql:5432/keycloak
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: postgres
      KC_HOSTNAME: localhost
      KC_HOSTNAME_PORT: 8180
      KC_HOSTNAME_STRICT: false
      KC_HOSTNAME_STRICT_HTTPS: false
      KC_HTTP_ENABLED: true
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
    ports:
      - "8180:8080"
    volumes:
      - ./config/keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json
      - keycloak_data:/opt/keycloak/data
    command:
      - start-dev
      - --import-realm
    depends_on:
      postgresql:
        condition: service_healthy
    networks:
      - projecttaskhub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============== CONFIG SERVER ===============
  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    environment:
      JAVA_OPTS: "-Xmx512m -Xms256m"
      SPRING_PROFILES_ACTIVE: docker
    ports:
      - "8888:8888"
    volumes:
      - ./config:/app/config
    networks:
      - projecttaskhub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8888/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============== DISCOVERY SERVER ===============
  discovery-server:
    build:
      context: ./discovery-server
      dockerfile: Dockerfile
    container_name: discovery-server
    environment:
      JAVA_OPTS: "-Xmx512m -Xms256m"
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_CLOUD_CONFIG_USERNAME: config-admin
      SPRING_CLOUD_CONFIG_PASSWORD: config-pass
    ports:
      - "8761:8761"
    depends_on:
      config-server:
        condition: service_healthy
    networks:
      - projecttaskhub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8761/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============== API GATEWAY ===============
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: api-gateway
    environment:
      JAVA_OPTS: "-Xmx1g -Xms512m"
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_CLOUD_CONFIG_USERNAME: config-admin
      SPRING_CLOUD_CONFIG_PASSWORD: config-pass
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-server:8761/eureka/
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/projecttaskhub
    ports:
      - "8080:8080"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - projecttaskhub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============== PROJECT SERVICE ===============
  project-service:
    build:
      context: ./project-service
      dockerfile: Dockerfile
    container_name: project-service
    environment:
      JAVA_OPTS: "-Xmx1g -Xms512m"
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_CLOUD_CONFIG_USERNAME: config-admin
      SPRING_CLOUD_CONFIG_PASSWORD: config-pass
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-server:8761/eureka/
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgresql:5432/projectdb
      SPRING_DATASOURCE_USERNAME: postgres
      SPRING_DATASOURCE_PASSWORD: postgres
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/projecttaskhub
    ports:
      - "8081:8081"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      postgresql:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - projecttaskhub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # =============== TASK SERVICE ===============
  task-service:
    build:
      context: ./task-service
      dockerfile: Dockerfile
    container_name: task-service
    environment:
      JAVA_OPTS: "-Xmx1g -Xms512m"
      SPRING_PROFILES_ACTIVE: docker
      SPRING_CLOUD_CONFIG_URI: http://config-server:8888
      SPRING_CLOUD_CONFIG_USERNAME: config-admin
      SPRING_CLOUD_CONFIG_PASSWORD: config-pass
      EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE: http://discovery-server:8761/eureka/
      SPRING_DATA_MONGODB_URI: mongodb://admin:admin123@mongodb:27017/taskdb?authSource=admin
      SPRING_RABBITMQ_HOST: rabbitmq
      SPRING_RABBITMQ_PORT: 5672
      SPRING_RABBITMQ_USERNAME: guest
      SPRING_RABBITMQ_PASSWORD: guest
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI: http://keycloak:8080/realms/projecttaskhub
    ports:
      - "8082:8082"
    depends_on:
      config-server:
        condition: service_healthy
      discovery-server:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      keycloak:
        condition: service_healthy
    networks:
      - projecttaskhub-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

# =============== VOLUMES ===============
volumes:
  postgres_data:
    driver: local
  mongo_data:
    driver: local
  rabbitmq_data:
    driver: local
  keycloak_data:
    driver: local

# =============== NETWORKS ===============
networks:
  projecttaskhub-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16